" This must be first, because it changes other options as side effect
set nocompatible

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugins
Plugin 'airblade/vim-gitgutter'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab' " ???
Plugin 'geoffharcourt/one-dark.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'itchyny/vim-gitbranch'
Plugin 'majutsushi/tagbar'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'rakr/vim-one'
Plugin 'rust-lang/rust.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-markdown'
Plugin 'Valloric/YouCompleteMe'
Plugin 'w0rp/ale'
" All of your Plugins must be added before the following line
" To install the plugins, launch vim and run :PluginInstall
" Or from command line: vim +PluginInstall +qall
call vundle#end()

" Enable filetype dectection and ft specific plugin/indent
filetype plugin indent on

" Enable syntax hightlight
syntax on


" Editor settings
" ---------------

" General
set confirm " prompt when existing from an unsaved file
set hidden " allow hiding buffers instead of closing them
set wildmenu " better command-line completion
set autoread " automatically read a file that has changed on disk
set history=1000
set undolevels=1000
set backspace=indent,eol,start " more powerful backspacing
set encoding=utf-8 " set the default file encoding to UTF-8:

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" Security
set cm=blowfish2 " set cryptmethod to blowfish2
set viminfo= " the viminfo file is not encrypted, and thus should not be used

" Better copy & paste
" When you want to paste large blocks of code into vim, press F2 before you
" paste. At the bottom you should see ``-- INSERT (paste) --``.
set pastetoggle=<F2>
set clipboard=unnamed

" Mouse and backspace
set mouse=a  " on OSX press ALT and click
set bs=2 " make backspace behave like normal again

" Display settings
set textwidth=0 " text width
set mouse=a " use mouse in all modes
set report=0 " always report number of lines changed
set wrap " wrap lines
set linebreak " don't break words
set nolist  " list disables linebreak
set scrolloff=2 " 2 lines above/below cursor when scrolling
set number " show line number
set relativenumber " show relative numbers
set showmatch " show matching bracket (briefly jump)
set showcmd " show typed command in status bar
set title " show file in titlebar
set laststatus=2 " use 2 lines for the status bar
set matchtime=2 " show matching bracket for 0.2 seconds
set matchpairs+=<:> " specially for html
set wildignore=*.o,*.class,*.so*,*.swp,*.pyc,*.pyo,core
set hlsearch " highlight search matches
set incsearch " show search matches as you type
set ignorecase " ignore case when searching
set smartcase " ignore case if search pattern is all lowercase, case-sensitive otherwise
set splitright " open file in right split
set splitbelow " set the preview window in the bottom
set noshowmode "disable show mode in status line
set laststatus=2 " show filename at bottom of buffer

" Folding settings
set foldmethod=indent " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " dont fold by default
set foldlevel=1 " this is just what i use

" Real programmers don't use TABs but spaces
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" No backup files
set nobackup
set nowritebackup
set noswapfile

" Set updatetime
set ttimeoutlen=0


" Plugins settings
" ----------------

" Exuberant Ctags path
" let g:tagbar_ctags_bin='~/bin/ctags'

" Settings for Lightline
let g:lightline = {}
let g:lightline.colorscheme = 'one'
let g:lightline.active = {}
let g:lightline.active.left = [ ['mode', 'paste'], [ 'gitbranch', 'readonly', 'filename' ] ]
let g:lightline.component_function = { 'gitbranch': 'gitbranch#name' }
let g:lightline.component_function = { 'filename': 'LightlineFilename' }

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

" Settings for NERDTree
let NERDChristmasTree = 0
let NERDTreeWinSize = 30
let NERDTreeChDirMode = 2
let NERDTreeIgnore = ['\.vim$', '\~$', '\.pyc$', '\.swp$']
let NERDTreeSortOrder = ['^__\.py$', '\/$', '*', '\.swp$', '\~$']
let NERDTreeShowBookmarks = 1
let NERDTreeShowHidden = 0 " don't show hidden files, use shift-i to toggle
let NERDTreeWinPos = "left"

" Settings for ctrlp.vim
let g:ctrlp_max_height = 25
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*

" Settings for GitGutter
autocmd BufWritePost * GitGutter

" Settings for YouCompleteMe

" General
let g:ycm_auto_trigger = 1
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 0
let g:ycm_filetype_blacklist = {}
let g:ycm_semantic_triggers = {
    \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
    \ 'cs,lua,javascript,rust': ['re!\w{2}'],
    \ }
let g:ycm_filetype_blacklist = {
    \ 'tagbar' : 1,
    \ 'nerdtree' : 1,
    \ 'markdown' : 1,
    \ 'unite' : 1,
    \ 'text' : 1,
    \ 'csv' : 1,
    \ }

" Rust
" Installation instructions:
"   $ cd ~/dev/github.com/ && git clone https://github.com/rust-lang/rust.git -b stable
"   $ cd ~/.vim/bundle/YouCompleteMe && ./install.py --rust-completer && ./install.py --racer-completer
"   $ rustup component add rustfmt
let g:ycm_rust_src_path='~/dev/github.com/rust/src'
let g:rustfmt_autosave = 1

" Python
let g:ycm_path_to_python_interpreter = substitute( system('which python'), '\n', '', '' )



" Keybindings
" -----------

" Rebind <Leader> key
let mapleader = ","

" Keybindings for plugin toggle
nmap <F6> :NERDTreeToggle<CR>
nmap <F7> :IndentGuidesToggle<CR>
nmap <F8> :TagbarToggle<CR>

" Bash-like home/end key mappings
nmap <C-A> <Home>
nmap <C-E> <End>
imap <C-A> <Home>
imap <C-E> <End>
vmap <C-A> <Home>
vmap <C-E> <End>

" Bind Ctrl+<movement> keys to move around the windows, instead of using
" Ctrl+w + <movement>
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

" Easier moving between tabs
map <Leader>p <esc>:tabprevious<CR>
map <Leader>n <esc>:tabnext<CR>
nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt
nnoremap <A-0> 10gt

" Easier switching between buffers
nnoremap <silent> <C-Right> :bn<CR>
nnoremap <silent> <C-Left> :bp<CR>
nnoremap <silent> <C-J> :bn<CR>
nnoremap <silent> <C-k> :bp<CR>

" <Leader>l redraws the screen and remove any search highlighting
nnoremap <silent> <Leader>l :nohl<CR>

" Use Enter for inserting a line after the current line without enter
" the insert mode
nmap <CR> o<Esc>

" Map sort function to a key
vnoremap <Leader>s :sort<CR>

" Easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

" Syntastic toggle errors window
nnoremap <silent> <C-e> :<C-u>call ToggleErrors()<CR>

function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction

" YouCompleteMe
nnoremap <Leader>gd :YcmCompleter GetDoc<CR>
nnoremap <Leader>gD :YcmCompleter GoToDefinition<CR>
nnoremap <Leader>gr :YcmCompleter GoToReferences<CR>

" ALE
nnoremap <silent> <leader>al :ALELint<CR>
nnoremap <silent> <leader>aj :ALENext<CR>
nnoremap <silent> <leader>ak :ALEPrevious<CR>
nnoremap <silent> <leader>at :ALEToggle<CR>

" Linter
" ------

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_save = 0
let g:ale_lint_on_enter = 0
let g:ale_list_window_size = 5
let g:ale_rust_cargo_use_check = 1
let g:ale_rust_cargo_check_all_targets = 1
let g:ale_rust_cargo_check_tests = 1
let g:ale_linters = {
    \ 'python': ['flake8', 'pylint'],
    \ 'rust': ['cargo', 'rls'],
    \ }


" Theme/Colors
" ------------

set t_Co=256 " terminal has 256 colors
try
    syntax enable
    set background=dark " for the dark version
    " colorscheme one
    colorscheme onedark
catch /^Vim\%((\a\+)\)\=:E185/
    " Use default
endtry

" Set ColorColumn
highlight ColorColumn ctermbg=magenta ctermfg=white guibg=magenta guifg=white
call matchadd('ColorColumn', '\%80v', 100)

 " Graphical options
if has("gui_running")
    " Remove toolbar, scrollbars, etc.
    set guioptions-=T
    set guioptions-=r
    set guioptions-=l
    set guioptions-=L
    set guioptions-=R
    set guioptions-=m
endif
